//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Code/InputSystem/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""6eb137f4-6223-4145-9556-91c157cd977f"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""379e1ee6-d570-4737-ae95-7f5dedb3ec28"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Aim"",
                    ""type"": ""Value"",
                    ""id"": ""96c633c7-01e6-468c-baa0-e58d3c731d5f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Dash"",
                    ""type"": ""Button"",
                    ""id"": ""4cbd2489-17cd-4b2c-b8b8-970ad69b76f3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""54055472-a910-44d9-857b-a241835475cf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ThrowTrigger"",
                    ""type"": ""PassThrough"",
                    ""id"": ""2ce2b872-e5ca-4ceb-9e16-7c6c643799fc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Escape"",
                    ""type"": ""Button"",
                    ""id"": ""784d98cd-5983-4f9a-a535-11b55d755068"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""10ece1bc-95f6-4a26-8089-decb9bff4b49"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a103dce1-c620-441d-9b97-c44c698ee3fe"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""5d155ad5-7d77-4dcc-bd34-0bed5aae472d"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": ""NormalizeVector2"",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""ae9aa3e5-4ae4-41ad-abc0-8687bb3e3626"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""70d7ee79-398a-404e-a730-6e609930bbf2"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""ad9eb0e2-fff6-4304-9a2c-66e77b1def3b"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""4638898c-924f-4055-b600-a2f7f5b41413"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""43614bfb-5981-4e1c-85b4-e3d19f194eb9"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone"",
                    ""groups"": ""Controller"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""91a93223-cafb-48fe-9350-2a1900dbae69"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""ThrowTrigger"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e03b7510-fdae-4015-8c82-94ace8847f72"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""ThrowTrigger"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3dfbf073-a6cf-49e9-a889-b069866c7bea"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e5d0c633-0db2-4217-8200-8ca91cb85e67"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""26300608-2ce3-47ea-acc3-e97a8953682d"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Escape"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""41920509-be80-4d5b-9a0f-5f384c1f3616"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Escape"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""cc4a056e-d614-4671-b672-a33579ab0c82"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": ""NormalizeVector2"",
                    ""groups"": """",
                    ""action"": ""Aim"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""1d1ff587-0ddd-410e-97bc-863e118426cf"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Aim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""41d0f5f0-84b2-4f8a-9781-4f7909b12b89"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Aim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""4ca3eaf7-3e52-47f5-8bb6-8710eb85c13f"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Aim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""e82f7542-1cdc-4cba-ac09-dff357eee90a"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Aim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""6cfec1bd-520f-485a-9fd5-75d6ace8f417"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone"",
                    ""groups"": ""Controller"",
                    ""action"": ""Aim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""GameManager"",
            ""id"": ""29ee72e2-d4b1-4c39-bfba-40cc5dcb6e3a"",
            ""actions"": [
                {
                    ""name"": ""Mute"",
                    ""type"": ""Button"",
                    ""id"": ""243c4a54-ab2c-43b7-bd78-cb47ce7e4dcc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ReloadLevel"",
                    ""type"": ""Button"",
                    ""id"": ""242a33d6-b526-4498-afcc-94945ab6b7c6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""NextLevel"",
                    ""type"": ""Button"",
                    ""id"": ""394bec56-d49f-4757-8b87-4f91d9537f86"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PreviousLevel"",
                    ""type"": ""Button"",
                    ""id"": ""cbc795a9-a31f-4c4d-b0c6-ea284fe2de21"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Quit"",
                    ""type"": ""Button"",
                    ""id"": ""a173fc8b-1501-4d5c-9f53-e0b7e2c93929"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""53c37f83-22ea-4864-9ece-7ba3f4f5201b"",
                    ""path"": ""<Keyboard>/m"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Mute"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cbf15070-897e-4718-afab-60a5d02b73a1"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""ReloadLevel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""336e6353-bec2-4741-a546-8135a3174cf2"",
                    ""path"": ""<Keyboard>/p"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""NextLevel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f5aecbf8-0753-4c66-a05b-5f54c3b64f90"",
                    ""path"": ""<Keyboard>/o"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""PreviousLevel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""54967a3a-9422-4bf4-9e88-10f4b8c2b99d"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Quit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""IntroScene"",
            ""id"": ""e5a7d982-f372-4ae8-ac31-607ca3803df1"",
            ""actions"": [
                {
                    ""name"": ""NextParagOrLvl"",
                    ""type"": ""Button"",
                    ""id"": ""5e2d572f-ceac-4d75-a5a8-d3c58cb4bf6f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""624bb00d-6d00-4433-9f4a-9f59b56f524a"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""NextParagOrLvl"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""278cafbf-a72b-46d7-a86b-f8914131a90a"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""NextParagOrLvl"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e19e8767-aa6e-4ec6-ada4-2b40f2c97105"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""NextParagOrLvl"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Controller"",
            ""bindingGroup"": ""Controller"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Move = m_Player.FindAction("Move", throwIfNotFound: true);
        m_Player_Aim = m_Player.FindAction("Aim", throwIfNotFound: true);
        m_Player_Dash = m_Player.FindAction("Dash", throwIfNotFound: true);
        m_Player_Interact = m_Player.FindAction("Interact", throwIfNotFound: true);
        m_Player_ThrowTrigger = m_Player.FindAction("ThrowTrigger", throwIfNotFound: true);
        m_Player_Escape = m_Player.FindAction("Escape", throwIfNotFound: true);
        // GameManager
        m_GameManager = asset.FindActionMap("GameManager", throwIfNotFound: true);
        m_GameManager_Mute = m_GameManager.FindAction("Mute", throwIfNotFound: true);
        m_GameManager_ReloadLevel = m_GameManager.FindAction("ReloadLevel", throwIfNotFound: true);
        m_GameManager_NextLevel = m_GameManager.FindAction("NextLevel", throwIfNotFound: true);
        m_GameManager_PreviousLevel = m_GameManager.FindAction("PreviousLevel", throwIfNotFound: true);
        m_GameManager_Quit = m_GameManager.FindAction("Quit", throwIfNotFound: true);
        // IntroScene
        m_IntroScene = asset.FindActionMap("IntroScene", throwIfNotFound: true);
        m_IntroScene_NextParagOrLvl = m_IntroScene.FindAction("NextParagOrLvl", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_Move;
    private readonly InputAction m_Player_Aim;
    private readonly InputAction m_Player_Dash;
    private readonly InputAction m_Player_Interact;
    private readonly InputAction m_Player_ThrowTrigger;
    private readonly InputAction m_Player_Escape;
    public struct PlayerActions
    {
        private @InputActions m_Wrapper;
        public PlayerActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Player_Move;
        public InputAction @Aim => m_Wrapper.m_Player_Aim;
        public InputAction @Dash => m_Wrapper.m_Player_Dash;
        public InputAction @Interact => m_Wrapper.m_Player_Interact;
        public InputAction @ThrowTrigger => m_Wrapper.m_Player_ThrowTrigger;
        public InputAction @Escape => m_Wrapper.m_Player_Escape;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Aim.started += instance.OnAim;
            @Aim.performed += instance.OnAim;
            @Aim.canceled += instance.OnAim;
            @Dash.started += instance.OnDash;
            @Dash.performed += instance.OnDash;
            @Dash.canceled += instance.OnDash;
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
            @ThrowTrigger.started += instance.OnThrowTrigger;
            @ThrowTrigger.performed += instance.OnThrowTrigger;
            @ThrowTrigger.canceled += instance.OnThrowTrigger;
            @Escape.started += instance.OnEscape;
            @Escape.performed += instance.OnEscape;
            @Escape.canceled += instance.OnEscape;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Aim.started -= instance.OnAim;
            @Aim.performed -= instance.OnAim;
            @Aim.canceled -= instance.OnAim;
            @Dash.started -= instance.OnDash;
            @Dash.performed -= instance.OnDash;
            @Dash.canceled -= instance.OnDash;
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
            @ThrowTrigger.started -= instance.OnThrowTrigger;
            @ThrowTrigger.performed -= instance.OnThrowTrigger;
            @ThrowTrigger.canceled -= instance.OnThrowTrigger;
            @Escape.started -= instance.OnEscape;
            @Escape.performed -= instance.OnEscape;
            @Escape.canceled -= instance.OnEscape;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // GameManager
    private readonly InputActionMap m_GameManager;
    private List<IGameManagerActions> m_GameManagerActionsCallbackInterfaces = new List<IGameManagerActions>();
    private readonly InputAction m_GameManager_Mute;
    private readonly InputAction m_GameManager_ReloadLevel;
    private readonly InputAction m_GameManager_NextLevel;
    private readonly InputAction m_GameManager_PreviousLevel;
    private readonly InputAction m_GameManager_Quit;
    public struct GameManagerActions
    {
        private @InputActions m_Wrapper;
        public GameManagerActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Mute => m_Wrapper.m_GameManager_Mute;
        public InputAction @ReloadLevel => m_Wrapper.m_GameManager_ReloadLevel;
        public InputAction @NextLevel => m_Wrapper.m_GameManager_NextLevel;
        public InputAction @PreviousLevel => m_Wrapper.m_GameManager_PreviousLevel;
        public InputAction @Quit => m_Wrapper.m_GameManager_Quit;
        public InputActionMap Get() { return m_Wrapper.m_GameManager; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameManagerActions set) { return set.Get(); }
        public void AddCallbacks(IGameManagerActions instance)
        {
            if (instance == null || m_Wrapper.m_GameManagerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameManagerActionsCallbackInterfaces.Add(instance);
            @Mute.started += instance.OnMute;
            @Mute.performed += instance.OnMute;
            @Mute.canceled += instance.OnMute;
            @ReloadLevel.started += instance.OnReloadLevel;
            @ReloadLevel.performed += instance.OnReloadLevel;
            @ReloadLevel.canceled += instance.OnReloadLevel;
            @NextLevel.started += instance.OnNextLevel;
            @NextLevel.performed += instance.OnNextLevel;
            @NextLevel.canceled += instance.OnNextLevel;
            @PreviousLevel.started += instance.OnPreviousLevel;
            @PreviousLevel.performed += instance.OnPreviousLevel;
            @PreviousLevel.canceled += instance.OnPreviousLevel;
            @Quit.started += instance.OnQuit;
            @Quit.performed += instance.OnQuit;
            @Quit.canceled += instance.OnQuit;
        }

        private void UnregisterCallbacks(IGameManagerActions instance)
        {
            @Mute.started -= instance.OnMute;
            @Mute.performed -= instance.OnMute;
            @Mute.canceled -= instance.OnMute;
            @ReloadLevel.started -= instance.OnReloadLevel;
            @ReloadLevel.performed -= instance.OnReloadLevel;
            @ReloadLevel.canceled -= instance.OnReloadLevel;
            @NextLevel.started -= instance.OnNextLevel;
            @NextLevel.performed -= instance.OnNextLevel;
            @NextLevel.canceled -= instance.OnNextLevel;
            @PreviousLevel.started -= instance.OnPreviousLevel;
            @PreviousLevel.performed -= instance.OnPreviousLevel;
            @PreviousLevel.canceled -= instance.OnPreviousLevel;
            @Quit.started -= instance.OnQuit;
            @Quit.performed -= instance.OnQuit;
            @Quit.canceled -= instance.OnQuit;
        }

        public void RemoveCallbacks(IGameManagerActions instance)
        {
            if (m_Wrapper.m_GameManagerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameManagerActions instance)
        {
            foreach (var item in m_Wrapper.m_GameManagerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameManagerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameManagerActions @GameManager => new GameManagerActions(this);

    // IntroScene
    private readonly InputActionMap m_IntroScene;
    private List<IIntroSceneActions> m_IntroSceneActionsCallbackInterfaces = new List<IIntroSceneActions>();
    private readonly InputAction m_IntroScene_NextParagOrLvl;
    public struct IntroSceneActions
    {
        private @InputActions m_Wrapper;
        public IntroSceneActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @NextParagOrLvl => m_Wrapper.m_IntroScene_NextParagOrLvl;
        public InputActionMap Get() { return m_Wrapper.m_IntroScene; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(IntroSceneActions set) { return set.Get(); }
        public void AddCallbacks(IIntroSceneActions instance)
        {
            if (instance == null || m_Wrapper.m_IntroSceneActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_IntroSceneActionsCallbackInterfaces.Add(instance);
            @NextParagOrLvl.started += instance.OnNextParagOrLvl;
            @NextParagOrLvl.performed += instance.OnNextParagOrLvl;
            @NextParagOrLvl.canceled += instance.OnNextParagOrLvl;
        }

        private void UnregisterCallbacks(IIntroSceneActions instance)
        {
            @NextParagOrLvl.started -= instance.OnNextParagOrLvl;
            @NextParagOrLvl.performed -= instance.OnNextParagOrLvl;
            @NextParagOrLvl.canceled -= instance.OnNextParagOrLvl;
        }

        public void RemoveCallbacks(IIntroSceneActions instance)
        {
            if (m_Wrapper.m_IntroSceneActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IIntroSceneActions instance)
        {
            foreach (var item in m_Wrapper.m_IntroSceneActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_IntroSceneActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public IntroSceneActions @IntroScene => new IntroSceneActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    private int m_ControllerSchemeIndex = -1;
    public InputControlScheme ControllerScheme
    {
        get
        {
            if (m_ControllerSchemeIndex == -1) m_ControllerSchemeIndex = asset.FindControlSchemeIndex("Controller");
            return asset.controlSchemes[m_ControllerSchemeIndex];
        }
    }
    public interface IPlayerActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnAim(InputAction.CallbackContext context);
        void OnDash(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnThrowTrigger(InputAction.CallbackContext context);
        void OnEscape(InputAction.CallbackContext context);
    }
    public interface IGameManagerActions
    {
        void OnMute(InputAction.CallbackContext context);
        void OnReloadLevel(InputAction.CallbackContext context);
        void OnNextLevel(InputAction.CallbackContext context);
        void OnPreviousLevel(InputAction.CallbackContext context);
        void OnQuit(InputAction.CallbackContext context);
    }
    public interface IIntroSceneActions
    {
        void OnNextParagOrLvl(InputAction.CallbackContext context);
    }
}
